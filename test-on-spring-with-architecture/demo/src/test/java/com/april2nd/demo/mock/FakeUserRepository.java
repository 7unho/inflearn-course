package com.april2nd.demo.mock;

import com.april2nd.demo.user.domain.User;
import com.april2nd.demo.user.domain.UserStatus;
import com.april2nd.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    /*
    TODO: Collections.synchronizedList?
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());
    -> Collections.synchronizedList(new ArrayList<>())를 사용하면 병렬 처리를 대응할 수 있다.
    그런데, 소형 테스트는 단일 스레드로 동작하기 때문에, 동기화를 걱정할 필요가 없다.
     */
    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream().filter(item -> item.getId().equals(id) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public User save(User user) {
        if(user.getId() == null || user.getId().equals(0L)) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        }

        data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
        data.add(user);

        return user;
    }
}
